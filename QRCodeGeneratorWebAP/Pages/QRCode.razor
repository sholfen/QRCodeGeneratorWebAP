@page "/"
@using Blazored.LocalStorage;
@using QRCodeGeneratorWebAP.Data
@inject WeatherForecastService ForecastService
@inject QRCodeAppService qRCodeAppService
@inject ILocalStorageService localstorage

<h3>QRCode</h3>

<Button Color="ButtonColor.Info" @onclick="Clear">Clear Cache</Button>
<br />
<input type="text" @bind-value="input" /><br />
@* <button class="btn btn-primary" @onclick="async (e) => await this.GenerateQRCode(e)">Generate QRCode</button> *@
<Button Color="ButtonColor.Info" @onclick="GenerateQRCode">Generate QRCode</Button>
<br />
<span>@message</span>
<br />
<img src="@imageData" />
<br />
<span>@imageData</span>

@code {
    private int currentCount = 0;
    private string imageData = string.Empty;
    private string input = string.Empty;
    private string message = string.Empty;

    protected override void OnAfterRender(bool firstRender)
    {
        if(!firstRender)
        {
            message = "完成";
        }
    }

    //private async Task GenerateQRCode(MouseEventArgs e)
    private async Task GenerateQRCode()
    {
        message = "處理中";
        //imageData = await qRCodeAppService.GetQRCodeImgString(input);
        imageData = qRCodeAppService.GetQRCodeImgString2(input);
        //await localstorage.ClearAsync();
        try
        {
            List<QRCodeData> list = await localstorage.GetItemAsync<List<QRCodeData>>(QRCodeData.KEY);
            if (list == null)
            {
                list = new List<QRCodeData>();
            }
            list.Add(new QRCodeData { URL = input, ImagStr = imageData });
            await localstorage.SetItemAsync<List<QRCodeData>>(QRCodeData.KEY, list);
            //message = "完成";
        }
        catch(Exception ex)
        {
            message = ex.Message;
        }
        finally
        {
            input = string.Empty;
        }
        //Task.WaitAll();
    }

    private async Task Clear()
    {
        await localstorage.ClearAsync();
        message = "資料已清除";
    }
}
